#+OPTIONS: toc:nil num:nil author:nil creator:nil \n:nil |:t
#+OPTIONS: @:t ::t ^:t -:t f:t *:t <:t

* 木構造の可視化汎用ライブラリ

  使い方は parent, children メソッドを持つオブジェクトを TreeSupport.tree に渡すだけ

** テキスト化するには？

   : require "tree_support"
   :
   : class Node
   :   attr_accessor :parent, :children # 親と子たち(TreeSupport.treeを使うにはpublicで参照できるようにしておく)
   :
   :   attr_accessor :name
   :
   :   def initialize(name)
   :     @name = name
   :     @children = []
   :   end
   :
   :   # 木を簡単につくるため
   :   def add(name, &block)
   :     tap do
   :       node = self.class.new(name)
   :       node.parent = self
   :       @children << node
   :       if block_given?
   :         node.instance_eval(&block)
   :       end
   :     end
   :   end
   : end
   :
   : root = Node.new("<root>").tap do |n|
   :   n.instance_eval do
   :     add "交戦" do
   :       add "攻撃" do
   :         add "剣を振る"
   :         add "攻撃魔法" do
   :           add "召喚A"
   :           add "召喚B"
   :         end
   :         add "縦で剣をはじく"
   :       end
   :       add "防御"
   :     end
   :     add "撤退" do
   :       add "足止めする" do
   :         add "トラップをしかける"
   :         add "弓矢を放つ"
   :       end
   :       add "逃走する"
   :     end
   :     add "休憩" do
   :       add "立ち止まる"
   :       add "回復する" do
   :         add "回復魔法"
   :         add "回復薬を飲む"
   :       end
   :     end
   :   end
   : end

   TreeSupport.tree に渡すオブジェクトは は parent.children に応答できれば何でもいい

   : puts TreeSupport.tree(root)
   : # >> <root>
   : # >> ├─交戦
   : # >> │   ├─攻撃
   : # >> │   │   ├─剣を振る
   : # >> │   │   ├─攻撃魔法
   : # >> │   │   │   ├─召喚A
   : # >> │   │   │   └─召喚B
   : # >> │   │   └─縦で剣をはじく
   : # >> │   └─防御
   : # >> ├─撤退
   : # >> │   ├─足止めする
   : # >> │   │   ├─トラップをしかける
   : # >> │   │   └─弓矢を放つ
   : # >> │   └─逃走する
   : # >> └─休憩
   : # >>     ├─立ち止まる
   : # >>     └─回復する
   : # >>         ├─回復魔法
   : # >>         └─回復薬を飲む

   オブジェクト自体に tree メソッドを持たせたければ TreeSupport::Model を include する

   : Node.send(:include, TreeSupport::Model)
   : puts root.tree
   : # >> <root>
   : # >> ├─交戦
   : # >> │   ├─攻撃
   : # >> │   │   ├─剣を振る
   : # >> │   │   ├─攻撃魔法
   : # >> │   │   │   ├─召喚A
   : # >> │   │   │   └─召喚B
   : # >> │   │   └─縦で剣をはじく
   : # >> │   └─防御
   : # >> ├─撤退
   : # >> │   ├─足止めする
   : # >> │   │   ├─トラップをしかける
   : # >> │   │   └─弓矢を放つ
   : # >> │   └─逃走する
   : # >> └─休憩
   : # >>     ├─立ち止まる
   : # >>     └─回復する
   : # >>         ├─回復魔法
   : # >>         └─回復薬を飲む

** 画像化するには？

   : gv = TreeSupport.graphviz(root)

   これで GraphvizR のオブジェクトが返ってくるので dot 文字列にするには to_dot を呼ぶ

   : puts gv.to_dot
   : # >> digraph n70146110700700 {
   : # >>   graph [charset = "UTF-8", rankdir = "LR"];
   : # >>   n70146110700700 [label = "<root>"];
   : # >>   n70146110700700 -> {n70146110698600; n70146110691220; n70146110689500;};
   : # >>   n70146110698600 [label = "交戦"];
   : # >>   n70146110698600 -> {n70146110698320; n70146110691720;};
   : # >>   n70146110698320 [label = "攻撃"];
   : # >>   n70146110698320 -> {n70146110697900; n70146110697240; n70146110692060;};
   : # >>   n70146110697900 [label = "剣を振る"];
   : # >>   n70146110697240 [label = "攻撃魔法"];
   : # >>   n70146110697240 -> {n70146110695080; n70146110694480;};
   : # >>   n70146110695080 [label = "召喚A"];
   : # >>   n70146110694480 [label = "召喚B"];
   : # >>   n70146110692060 [label = "縦で剣をはじく"];
   : # >>   n70146110691720 [label = "防御"];
   : # >>   n70146110691220 [label = "撤退"];
   : # >>   n70146110691220 -> {n70146110690400; n70146110689620;};
   : # >>   n70146110690400 [label = "足止めする"];
   : # >>   n70146110690400 -> {n70146110690220; n70146110689820;};
   : # >>   n70146110690220 [label = "トラップをしかける"];
   : # >>   n70146110689820 [label = "弓矢を放つ"];
   : # >>   n70146110689620 [label = "逃走する"];
   : # >>   n70146110689500 [label = "休憩"];
   : # >>   n70146110689500 -> {n70146110688500; n70146110687660;};
   : # >>   n70146110688500 [label = "立ち止まる"];
   : # >>   n70146110687660 [label = "回復する"];
   : # >>   n70146110687660 -> {n70146110686920; n70146110686220;};
   : # >>   n70146110686920 [label = "回復魔法"];
   : # >>   n70146110686220 [label = "回復薬を飲む"];
   : # >> }

   画像にするには output を使う。(※gvオブジェクト以下は TreeSupport の機能ではなくて GraphvizR の機能)

   : gv.output("tree.png")

   [[https://raw.github.com/akicho8/tree_support/master/tree.png]]

   特定のノードだけ色を替えたいときは以下のようにブロックで graphviz の属性をハッシュで返す。(※ppみたいに咄嗟に確認できることが重要なので、ここにあんまり力を入れちゃいけない)

   : gv = TreeSupport.graphviz(root){|node|
   :   if node.name.include?("攻")
   :     {:fillcolor => "lightblue", :style => "filled"}
   :   elsif node.name.include?("回復")
   :     {:fillcolor => "lightpink", :style => "filled"}
   :   end
   : }
   : gv.output("tree_color.png")

   [[https://raw.github.com/akicho8/tree_support/master/tree_color.png]]

** Tips

*** デバッグ時にすぐ画像変換したものを確認したい

   : TreeSupport.gp(root)

    とすれば画像が見れる。以下のショートカットに相当。

   : TreeSupport.graphviz(root).output("_output.png")
   : `open _output.png`

*** 木を作るのが面倒

   : TreeSupport.example

    に簡単なサンプルの木が入ってる

*** to_s_tree を定義することなく表示をカスタマイズするには？

    treeにブロックをつける

    : puts TreeSupport.tree(root){|node|node.object_id}
    : 70308514816100
    : ├─70308514815920
    : │   ├─70308514815780
    : │   │   ├─70308514815680
    : │   │   ├─70308514815580
    : │   │   │   ├─70308514815480
    : │   │   │   └─70308514815420
    : │   │   └─70308514815360
    : │   └─70308514815300
    : ├─70308514815220
    : │   ├─70308514815080
    : │   │   ├─70308514814980
    : │   │   └─70308514814920
    : │   └─70308514814860
    : └─70308514814780
    :      ├─70308514814680
    :      └─70308514814580
    :           ├─70308514814480
    :           └─70308514814420
