#+OPTIONS: toc:nil num:nil author:nil creator:nil \n:nil |:t
#+OPTIONS: @:t ::t ^:t -:t f:t *:t <:t

* 木構造の可視化汎用ライブラリ

** 3行でわかる使い方

   1. 表示するオブジェクトは parent, children メソッドを持っていること
   2. テキスト化ならそれを TreeSupport.tree に渡す
   3. 画像化なら TreeSupport.gp に渡す

: require "tree_support"
: puts TreeSupport.tree(TreeSupport.example)
: # >> <root>
: # >> ├─交戦
: # >> │   ├─攻撃
: # >> │   │   ├─剣を振る
: # >> │   │   ├─攻撃魔法
: # >> │   │   │   ├─召喚A
: # >> │   │   │   └─召喚B
: # >> │   │   └─縦で剣をはじく
: # >> │   └─防御
: # >> ├─撤退
: # >> │   ├─足止めする
: # >> │   │   ├─トラップをしかける
: # >> │   │   └─弓矢を放つ
: # >> │   └─逃走する
: # >> └─休憩
: # >>     ├─立ち止まる
: # >>     └─回復する
: # >>         ├─回復魔法
: # >>         └─回復薬を飲む

** 詳しい使い方

*** ノードの準備

: class Node
:   attr_accessor :parent, :children
:
:   attr_accessor :name
:
:   def initialize(name, &block)
:     @name = name
:     @children = []
:     if block_given?
:       instance_eval(&block)
:     end
:   end
:
:   def add(*args, &block)
:     tap do
:       node = self.class.new(*args)
:       node.parent = self
:       @children << node
:       if block_given?
:         node.instance_eval(&block)
:       end
:     end
:   end
: end

*** 木の作成

: root = Node.new("<root>") do
:   add "交戦" do
:     add "攻撃" do
:       add "剣を振る"
:       add "攻撃魔法" do
:         add "召喚A"
:         add "召喚B"
:       end
:       add "縦で剣をはじく"
:     end
:     add "防御"
:   end
:   add "撤退" do
:     add "足止めする" do
:       add "トラップをしかける"
:       add "弓矢を放つ"
:     end
:     add "逃走する"
:   end
:   add "休憩" do
:     add "立ち止まる"
:     add "回復する" do
:       add "回復魔法"
:       add "回復薬を飲む"
:     end
:   end
: end

*** テキスト表示

   TreeSupport.tree に渡すオブジェクトは parent.children の構造になっていれば何でもいい

: require "tree_support"
: puts TreeSupport.tree(root)
: # >> <root>
: # >> ├─交戦
: # >> │   ├─攻撃
: # >> │   │   ├─剣を振る
: # >> │   │   ├─攻撃魔法
: # >> │   │   │   ├─召喚A
: # >> │   │   │   └─召喚B
: # >> │   │   └─縦で剣をはじく
: # >> │   └─防御
: # >> ├─撤退
: # >> │   ├─足止めする
: # >> │   │   ├─トラップをしかける
: # >> │   │   └─弓矢を放つ
: # >> │   └─逃走する
: # >> └─休憩
: # >>     ├─立ち止まる
: # >>     └─回復する
: # >>         ├─回復魔法
: # >>         └─回復薬を飲む

*** TreeSupport.tree を書くのも面倒

   TreeSupport::Model を include する

: Node.send(:include, TreeSupport::Model)
: puts root.tree
: # >> <root>
: # >> ├─交戦
: # >> │   ├─攻撃
: # >> │   │   ├─剣を振る
: # >> │   │   ├─攻撃魔法
: # >> │   │   │   ├─召喚A
: # >> │   │   │   └─召喚B
: # >> │   │   └─縦で剣をはじく
: # >> │   └─防御
: # >> ├─撤退
: # >> │   ├─足止めする
: # >> │   │   ├─トラップをしかける
: # >> │   │   └─弓矢を放つ
: # >> │   └─逃走する
: # >> └─休憩
: # >>     ├─立ち止まる
: # >>     └─回復する
: # >>         ├─回復魔法
: # >>         └─回復薬を飲む

*** ノードのラベルを変更するには？

   to_s_tree, name, to_s の順に探すので優先度を考えてメソッドを定義する

*** メソッドを定義することなくラベルを変更するには？

   treeにブロックをつける

: puts TreeSupport.tree(root){|node|node.object_id}
: 70308514816100
: ├─70308514815920
: │   ├─70308514815780
: │   │   ├─70308514815680
: │   │   ├─70308514815580
: │   │   │   ├─70308514815480
: │   │   │   └─70308514815420
: │   │   └─70308514815360
: │   └─70308514815300
: ├─70308514815220
: │   ├─70308514815080
: │   │   ├─70308514814980
: │   │   └─70308514814920
: │   └─70308514814860
: └─70308514814780
:      ├─70308514814680
:      └─70308514814580
:           ├─70308514814480
:           └─70308514814420

*** GraphvizR のオブジェクトに変換するには？

: gv = TreeSupport.graphviz(root)

*** 画像化するには？

: gv.output("tree.png")

   [[https://raw.github.com/akicho8/tree_support/master/images/tree.png]]

*** 特定のノードの色を変更するには？

   TreeSupport.graphviz のブロックで graphviz の属性をハッシュで返す

: gv = TreeSupport.graphviz(root){|node|
:   if node.name.include?("攻")
:     {:fillcolor => "lightblue", :style => "filled"}
:   elsif node.name.include?("回復")
:     {:fillcolor => "lightpink", :style => "filled"}
:   end
: }
: gv.output("tree_color.png")

   [[https://raw.github.com/akicho8/tree_support/master/images/tree_color.png]]

*** 特定のノードのラベルを変更するには？

   上の方法と同様に label 値を含んだハッシュを返す

: gv = TreeSupport.graphviz(root){|node|
:   {:label => node.name.chars.first}
: }
: gv.output("tree_label.png")

   [[https://raw.github.com/akicho8/tree_support/master/images/tree_label.png]]

*** Graphvizのdot形式を確認するには？

: puts gv.to_dot
: # >> digraph n70146110700700 {
: # >>   graph [charset = "UTF-8", rankdir = "LR"];
: # >>   n70146110700700 [label = "<root>"];
: # >>   n70146110700700 -> {n70146110698600; n70146110691220; n70146110689500;};
: # >>   n70146110698600 [label = "交戦"];
: # >>   n70146110698600 -> {n70146110698320; n70146110691720;};
: # >>   n70146110698320 [label = "攻撃"];
: # >>   n70146110698320 -> {n70146110697900; n70146110697240; n70146110692060;};
: # >>   n70146110697900 [label = "剣を振る"];
: # >>   n70146110697240 [label = "攻撃魔法"];
: # >>   n70146110697240 -> {n70146110695080; n70146110694480;};
: # >>   n70146110695080 [label = "召喚A"];
: # >>   n70146110694480 [label = "召喚B"];
: # >>   n70146110692060 [label = "縦で剣をはじく"];
: # >>   n70146110691720 [label = "防御"];
: # >>   n70146110691220 [label = "撤退"];
: # >>   n70146110691220 -> {n70146110690400; n70146110689620;};
: # >>   n70146110690400 [label = "足止めする"];
: # >>   n70146110690400 -> {n70146110690220; n70146110689820;};
: # >>   n70146110690220 [label = "トラップをしかける"];
: # >>   n70146110689820 [label = "弓矢を放つ"];
: # >>   n70146110689620 [label = "逃走する"];
: # >>   n70146110689500 [label = "休憩"];
: # >>   n70146110689500 -> {n70146110688500; n70146110687660;};
: # >>   n70146110688500 [label = "立ち止まる"];
: # >>   n70146110687660 [label = "回復する"];
: # >>   n70146110687660 -> {n70146110686920; n70146110686220;};
: # >>   n70146110686920 [label = "回復魔法"];
: # >>   n70146110686220 [label = "回復薬を飲む"];
: # >> }

*** デバッグ時にすぐ画像変換したものを確認するには？

: TreeSupport.gp(root)

   次のショートカットに相当

: TreeSupport.graphviz(root).output("_output.png")
: `open _output.png`

*** 木を作るのが面倒

: TreeSupport.example

   に簡単なサンプルの木が入ってる

*** ルートは表示したくない

: puts TreeSupport.tree(root, :skip_depth => 1)
: # >> 交戦
: # >> ├─攻撃
: # >> │   ├─剣を振る
: # >> │   ├─攻撃魔法
: # >> │   │   ├─召喚A
: # >> │   │   └─召喚B
: # >> │   └─縦で剣をはじく
: # >> └─防御
: # >> 撤退
: # >> ├─足止めする
: # >> │   ├─トラップをしかける
: # >> │   └─弓矢を放つ
: # >> └─逃走する
: # >> 休憩
: # >> ├─立ち止まる
: # >> └─回復する
: # >>     ├─回復魔法
: # >>     └─回復薬を飲む

**** 画像版も同様

: TreeSupport.graphviz(root).output("skip_depth.png", :skip_depth => 1)

    [[https://raw.github.com/akicho8/tree_support/master/images/skip_depth.png]]
